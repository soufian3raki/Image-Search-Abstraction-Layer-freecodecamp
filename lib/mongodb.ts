/**
 * üîå Utilidad para la conexi√≥n a MongoDB
 * Este m√≥dulo proporciona una conexi√≥n optimizada y cacheada a MongoDB
 * utilizando Mongoose como ORM.
 */
import mongoose from 'mongoose';

// üîë Verificaci√≥n de la URI de conexi√≥n
const MONGODB_URI = process.env.MONGODB_URI!;

if (!MONGODB_URI) {
  throw new Error('üö´ Por favor define la variable de entorno MONGODB_URI');
}

/**
 * üåê Estado de la conexi√≥n
 * Almacenamos la conexi√≥n en una variable global para reutilizarla
 * entre diferentes llamadas a la API, mejorando el rendimiento.
 */
// Define el tipo para el objeto global
interface GlobalWithMongoose extends Global {
  mongoose: {
    conn: typeof mongoose | null;
    promise: Promise<typeof mongoose> | null;
  };
}

// Usar el tipo correcto para el objeto cached
const cached = (global as unknown as GlobalWithMongoose);
cached.mongoose = cached.mongoose || { conn: null, promise: null };

/**
 * üîÑ Funci√≥n para conectar a la base de datos
 * Esta funci√≥n implementa un patr√≥n singleton para la conexi√≥n a MongoDB:
 * - Reutiliza una conexi√≥n existente si est√° disponible
 * - Crea una nueva conexi√≥n si no existe ninguna
 * - Maneja reconexiones autom√°ticamente
 * @returns Promise<typeof mongoose>
 */
export async function connectDB() {
  // ‚ôªÔ∏è Retornar conexi√≥n existente si est√° disponible
  if (cached.mongoose.conn) {
    return cached.mongoose.conn;
  }

  // üÜï Crear nueva conexi√≥n si no hay una promesa pendiente
  if (!cached.mongoose.promise) {
    const opts = {
      bufferCommands: true, // Permite comandos mientras se establece la conexi√≥n
    };

    cached.mongoose.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });

  }

  try {
    // ‚úÖ Esperar a que se complete la conexi√≥n
    cached.mongoose.conn = await cached.mongoose.promise;
  } catch (e) {
    // ‚ùå Resetear la promesa en caso de error
    cached.mongoose.promise = null;
    throw e;
  }

  return cached.mongoose.conn;
}
